/*
 *  Copyright 2003 by Texas Instruments Incorporated.
 *  All rights reserved. Property of Texas Instruments Incorporated.
 *  Restricted rights to use, duplicate or disclose this code are
 *  granted through contract.
 *  
 */
/* "@(#) DSP/BIOS 4.90.270 01-08-04 (bios,dsk6713-c04)" */
/*
 *  ======== pip_audio.c ========
 *
 *  This example demonstrates the use of IOM drivers with PIPs using 
 *  the PIO adapter with a user defined device mini-driver called
 *  "udevCodec". The application performs a loopback.  That is, audio data is
 *  read from one PIP connected to an input IOM channel, and the data is 
 *  written back out on a PIP connected to an output IOM channel.
 *
 *  The following objects need to be created in the DSP/BIOS
 *  configuration for this application:
 *
 *  * A UDEV object, which links in a user device driver. In this case
 *    the UDEV is a codec based IOM device driver. 
 *
 *  * A SWI object named swiEcho. Configure the function as _echo,
 *    and the mailbox value as 3.
 *
 *  * 2 PIP objects, one named pipTx, the other pipRx. The length of the
 *    buffers should be the same and can be any size. See the comments
 *    by the declarations below of pipTx and pipRx for the writer and
 *    reader notify function settings.
 *
 *  * A LOG object named trace, used for status and debug output. Can be
 *    any size and can be circular or fixed.
 */
 
#include <math.h>

#include <std.h>

#include <log.h>
#include <pip.h>
#include <swi.h>
#include <sys.h>

#include <iom.h>
#include <pio.h>
#include <DSPF_sp_cfftr2_dit.h>


#ifdef _6x_
extern far LOG_Obj trace;
extern far PIP_Obj pipRx; 
extern far PIP_Obj pipTx;
extern far SWI_Obj swiEcho;
#else
extern LOG_Obj trace; 
extern PIP_Obj pipRx;
extern PIP_Obj pipTx;
extern SWI_Obj swiEcho;
#endif

#define LNGBUF 128  // longueur des buffers
/*
 *  'pioRx' and 'pioTx' objects will be initialized by PIO_new(). 
 */
PIO_Obj pioRx, pioTx;

float BufIn[LNGBUF] ;		// buffer pour les entrées
float Buf2[LNGBUF] ;		// buffer pour les entrées
float BufOut[LNGBUF] ;		// buffer pour la sortie


far float x[LNGBUF*2*256] ;
far float w[LNGBUF*256] ;
far float fft[LNGBUF*128];
Int pos, N, nb_max, f;
float t, pas, marge, erreur;
float freq_ref[6];

void gen_w_r2(float* w, int n)
{
	int i;
	float pi = 3.1415926535;
	float e = (pi*2.0)/n;
	for(i= 0; i < (n/2); i++)
	{
		w[2*i] = cos(i*e);
		w[2*i+1] = sin(i*e);
	}
}



/*
 *  ======== main ========
 *
 *  Application startup funtion called by DSP/BIOS. Initialize the
 *  PIO adapter then return back into DSP/BIOS.
 */
main()
{

	
    /*
     * Initialize PIO module
     */
    PIO_init();

    /* Bind the PIPs to the channels using the PIO class drivers */
    PIO_new(&pioRx, &pipRx, "/udevCodec", IOM_INPUT, NULL);
    PIO_new(&pioTx, &pipTx, "/udevCodec", IOM_OUTPUT, NULL);

    /*
     * Prime the transmit side with buffers of silence.
     * The transmitter should be started before the receiver.
     * This results in input-to-output latency being one full
     * buffer period if the pipes is configured for 2 frames.
     */
    PIO_txStart(&pioTx, PIP_getWriterNumFrames(&pipTx), 0);

    /* Prime the receive side with empty buffers to be filled. */
    PIO_rxStart(&pioRx, PIP_getWriterNumFrames(&pipRx));

    LOG_printf(&trace, "pip_audio started");


	N = LNGBUF*256;

	pos = 0;
	
	
	gen_w_r2(w, N);
	bit_rev(w, N>>1);
	
	f = 44000;
	t = (N-1)/44000 ;
	pas = t/(N-1);
	nb_max = 5;
	marge = 0.05;
	erreur = 0.01;

	freq_ref[0] = 82;
	freq_ref[1] = 110;
	freq_ref[2] = 147;
	freq_ref[3] = 196;
	freq_ref[4] = 247;
	freq_ref[5] = 330;
}


/*
 *  ======== echo ========
 *
 *  This function is called by the swiEcho DSP/BIOS SWI thread created
 *  statically with the DSP/BIOS configuration tool. The PIO adapter
 *  posts the swi when an the input PIP has a buffer of data and the
 *  output PIP has an empty buffer to put new data into. This function
 *  copies from the input PIP to the output PIP. You could easily
 *  replace the copy function with a signal processing algorithm.
 */
 	
 
Void echo(Void)
{
    Int i, size, j, s, k, temp1, place_min;
    float m, temp2, temp3, min;
    short *src, *dst;
    float *ptr1, *ptr2 ;
    far float max[5];
    far Int pos_max[5];
    far float pos_max_freq[5];
    int freq_trouvee = 0;
	float freq_fondamentale = 0;
	int nb_harmonique = 0;
	float fraq;
    float reste;
	float freq_ref_fond;
	float diff;
	
	

    /*
     * Check that the precondions are met, that is pipRx has a buffer of
     * data and pipTx has a free buffer.
     */
    if (PIP_getReaderNumFrames(&pipRx) <= 0) {
        LOG_error("echo: No reader frame!", 0);
        return;
    }
    if (PIP_getWriterNumFrames(&pipTx) <= 0) {
        LOG_error("echo: No writer frame!", 0);
        return;
    }

    /* get the full buffer from the receive PIP */
    PIP_get(&pipRx);
    src = PIP_getReaderAddr(&pipRx);
    size = PIP_getReaderSize(&pipRx) * sizeof(short);

    /* get the empty buffer from the transmit PIP */
    PIP_alloc(&pipTx);
    dst = PIP_getWriterAddr(&pipTx);


	// -----------------------------------------
    /* copie l'entrée vers le buffer d'entrée */
    // -----------------------------------------

    ptr1 = &BufIn[0] ;
    for (i = 0; i < size; i++) {
      *ptr1++ = (float)*src++ / 32768.0; // normalisation du signal entre -1 et +1
    }     


    /////// debut


	// ------------------------------------------
	// filtre du canal
	// ------------------------------------------
	
	{
    /* recopie les données brutes */
    ptr1 = &BufIn[0] ;
    ptr2 = &BufOut[0] ;
    for (i = 0; i < size; i++) {
    		*ptr2++  = *ptr1++;
       }
	}
	
	/// fin



	
	
	
	
	if (pos < N*2) {
	ptr1 = &BufIn[0];
		for(i = pos; i < (pos + 2*LNGBUF-1) ; i = i+2) {
			x[i] = *ptr1++;
			x[i+1] = 0;
		}
		pos = pos + LNGBUF*2 ;
	}
	
	

	
// LE VECTEUR EST PLEIN
	
	//---------------DEBUT DU PROGRAMME---------------
	//------------------------------------------------
	
	
if (pos == N*2) {
	 // on fait la FFT
		DSPF_sp_cfftr2_dit(x,w,N);
		bit_rev(x, (2*N)>>1);
		
	// on en prend la valeur absolue de la deuxième moitiée
		for (i = 0; i < N/2 ; i++) {
			fft[i] = sqrt(x[2*i]*x[2*i] + x[2*i+1]*x[2*i+1]);
		}
		


	// on mets des zéro au début pour éliminer les constantes
		for (i = 0; i <=((N-1)*75/f) ; i++ ) {
    		fft[i]=0;
    		fft[N/2-i-1]=0;
		}

/*-------------programme de recherche des max-----------*/

for (s = 0; s< 5; s++) {


	// initialisation des vecteurs affectés à la cherche du max
	
	for ( i = 0; i <= (nb_max-1); i++) { // 5 = nb_max
		max[i] =0.0;
		pos_max[i] = 0;
		pos_max_freq[i] =0.0;
	}
	
	//boucle qui recherche les maxima
	
	for ( i=0; i< (N/2) ;i++ ) {
        j = 0;
        m = fft[i];
        if ( max[0]< m ) {
            while ( (j<=3)&&(max[j+1]<m) ) {  //4 = nb_max-1
                		j=j+1;
            }
            for (k = 0 ; k<=(j-1); k++) {
                max [k]=max[k+1];
                pos_max[k]= pos_max[k+1];
                pos_max_freq[k] = pos_max_freq[k+1];
            }
            max[j] = m;
            pos_max[j] = i;
            pos_max_freq[j] = (i)*f*2.18/(N-1);  //raport de 2.18 pour la correction des fréquences
        }
	}



	// boucle qui tri les maxima dans l'ordre d'apparition
    for (i = 0; i <= 4 ; i++) {  //4 = nb_max-1
        min = pos_max_freq [i];
        place_min = i;
        for (j = i+1 ; j<=4 ; j++) { // 4 = nb_max-1
            if (j <=4 ) {
            if ( pos_max_freq[j] < min )   {
                min = pos_max_freq[j];
                place_min = j;
            }
            }
        }
        temp1 = pos_max[i];
        temp2 = max[i];
        temp3 = pos_max_freq[i];
        pos_max[i] = pos_max[place_min];
        pos_max[place_min] = temp1;
        max[i] = max[place_min];
        max[place_min]=temp2;
        pos_max_freq[i] = pos_max_freq[place_min];
        pos_max_freq[place_min] = temp3;
    }

	
	//boucle qui élimine les maxima inutiles car trop proche d'un autre
    
    for (i = 0 ; i <= (nb_max-2) ; i++) {
        int a = pos_max[i];
        int b = pos_max[i+1];
        float vala = max[i];
        float valb = max[i+1];
        if (abs(b-a) < 100) {
            if (vala < valb) {
                fft[a] = 0.;
                max[i] = 0.;
             } else {
                fft[b] = 0.;
                max[i+1] = 0.;
            }
        }
    }
	


}
/*--------Fin du programme de recherche des max---------*/	



//LOG_printf(&trace, "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
//for ( i = 0; i <= N-1; i++) {
//LOG_printf(&trace, "%f",fft[i]);
//}
//LOG_printf(&trace, "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

for ( i = 0; i <= 4; i++) {
LOG_printf(&trace, "max : %f",max[i]);
}
for ( i = 0; i <= 4; i++) {
LOG_printf(&trace, "pos_max_freq: %f",pos_max_freq[i]);
}



/*--------Début du programme d'affichage des résultats---------*/	
 
//Détermination de la fréquence fondamentale

	i = 0;	
	while ((freq_trouvee==0) && i<=(nb_max-3)) {
    	freq_fondamentale = pos_max_freq[i];
    	nb_harmonique = 0;
    	for (j = i+1; j<=nb_max-1; j++) {
    	    fraq = pos_max_freq[j]/freq_fondamentale;
        	reste = fraq - floor(fraq);
        	if ((reste <= marge) || (reste >= (1-marge))) {
            	nb_harmonique = nb_harmonique+1;
	        }
   	 	}
    	if (nb_harmonique >= 3) {
    		freq_trouvee = 1;
    	}
   	 	i=i+1;
	}


	freq_ref_fond = 0;
	diff = 100000;

// Recherche de la fréquence correspondante
	
	for (i = 0; i<= 5; i++) {
    	if (abs(freq_ref[i]-freq_fondamentale)<diff) {
        	diff = abs(freq_ref[i]-freq_fondamentale);
        	freq_ref_fond = freq_ref[i];
    	}
	}
	
// Affichage


LOG_printf(&trace, "la note de reference est : %f",freq_ref_fond);
LOG_printf(&trace, "la note trouvée est : %f",freq_fondamentale);

diff = (freq_fondamentale - freq_ref_fond)/freq_ref_fond;

if (diff<-erreur) {
    LOG_printf(&trace, "Et vous êtes trop bas");
} else {
    if (diff>erreur) {
        LOG_printf(&trace, "Et vous êtes trop haut");
    } else {
        LOG_printf(&trace, "Et vous êtes juste");
    }
}



/*--------Fin du programme d'affichage des résultats---------*/		



}
    
    
    
    	
    if (pos == N*2) {
		for(i = 0; i < (2*LNGBUF*16-1) ; i++) {
			x[i] = 0;
		}
		pos = 0 ;
	}
	
	
	
	//---------------FIN DU PROGRAMME---------------
	//----------------------------------------------
    
 

    /* copie le buffer de sortie vers la sortie */
    ptr2 = &BufOut[0] ;
    for (i = 0; i < size; i++) {
      *dst++ = *ptr2++ *32768.0 ; // reconversion du signal en entier
    }     
	

    /* Record the amount of actual data being sent */
    PIP_setWriterSize(&pipTx, PIP_getReaderSize(&pipRx));

    /* Free the receive buffer, put the transmit buffer */
    PIP_put(&pipTx);
    PIP_free(&pipRx);
}
